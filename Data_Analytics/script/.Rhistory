set.seed(123)
n <- 15
x <- sample(n, replace = T)
x
mean(x);
#1.
mean(x) > min(x) & mean(x) < max(x)
#2.
x-mean(x)
sort(x-mean(x))
sum(x-mean(x))
#3.
mean((x-mean(x))^2)
a <- c(seq(min(x),max(x),0.5),mean(x))
a
sapply(a, function(a) mean((x-a)^2))
a[which.min(sapply(a, function(a) mean((x-a)^2)))]
# Altre medie analitiche
mean(x)*length(x); sum(x)     #media aritmetica
exp(mean(log(x)))^n; prod(x)  #media geometrica
library(DescTools)
install.packages("DescTools")
# quantile empirico x_p: #(x_i<=x_p)/n = p
sort(x)
cbind(sort(x), 1:n/n) # quantili empirici e loro ordine
cbind(sort(x), (0:(n-1))/n) # quantili empirici e loro ordine
?quantile
# per convenzione: p = (i-.5)/n
cbind(sort(x), .5:(n-.5)/n)
# mediana
# n dispari: x[(n+1)/2]; n pari: (x[(n)/2]+x[n/2+1])/2
sort(x)[(n+1)/2]
quantile(x,0.5)
# media o mediana?
library(insuranceData)
install(insuranceData)
install.packages("insuranceData")
library(insuranceData)
library(insuranceData)
data("AutoBi")
table(AutoBi$LOSS)
data(AutoBi)
median(AutoBi$LOSS); mean(AutoBi$LOSS)
fivenum(AutoBi$LOSS)
summary(AutoBi$LOSS)
# calcoliamo la media sfrondata al 5% per la variabile LOSS
mean(AutoBi$LOSS, na.rm=TRUE, trim=0.05)
mean(AutoBi$LOSS, na.rm=TRUE)
## Misure di dispersione ----
var(AutoBi$LOSS)
sd(AutoBi$LOSS)
# calcoliamo la varianza e la deviazione standard per la variabile LOSS # per i maschi e per le femmine
#"Maschi"
var(AutoBi$LOSS[AutoBi$CLMSEX=="M"], na.rm=TRUE)
sd(AutoBi$LOSS[AutoBi$CLMSEX=="M"], na.rm=TRUE)
# calcoliamo la varianza e la deviazione standard per la variabile LOSS # per i maschi e per le femmine
#"Maschi"
var(AutoBi$LOSS[AutoBi$CLMSEX=="M"], na.rm=TRUE)
sd(AutoBi$LOSS[AutoBi$CLMSEX=="M"], na.rm=TRUE)
#"Femmine"
var(AutoBi$LOSS[AutoBi$CLMSEX=="F"], na.rm=TRUE)
sd(AutoBi$LOSS[AutoBi$CLMSEX=="F"], na.rm=TRUE) ##
# la comparazione è più agevole se le medie nei due gruppi sono simili
mean(AutoBi$LOSS[AutoBi$CLMSEX=="M"], na.rm=TRUE)
mean(AutoBi$LOSS[AutoBi$CLMSEX=="F"], na.rm=TRUE)
# calcoliamo la varianza e la deviazione standard per la variabile LOSS # per i maschi e per le femmine
#"Maschi"
var(AutoBi$LOSS[AutoBi$CLMSEX=="M"], na.rm=F)
# calcoliamo la varianza e la deviazione standard per la variabile LOSS # per i maschi e per le femmine
#"Maschi"
var(AutoBi$LOSS[AutoBi$CLMSEX=="M"], na.rm=T)
AutoBi$LOSS[AutoBi$CLMSEX=="M"]
# notiamo la presenza di valori molto elevati per le donne...
summary(AutoBi$LOSS[AutoBi$CLMSEX=="M"])
summary(AutoBi$LOSS[AutoBi$CLMSEX=="F"])
### Altre misure di dispersione ----
# calcoliamo la varianza e il MAD per la variabile LOSS per i maschi e per le femmine
#"varianza"
var(AutoBi$LOSS[AutoBi$CLMSEX=="M"], na.rm=TRUE)
var(AutoBi$LOSS[AutoBi$CLMSEX=="F"], na.rm=TRUE)
#"MAD": median absolute deviation
mad(AutoBi$LOSS[AutoBi$CLMSEX=="M"], na.rm=TRUE)
mad(AutoBi$LOSS[AutoBi$CLMSEX=="F"], na.rm=TRUE)
# IQR: scarto interquartile
quantile(AutoBi$LOSS[AutoBi$CLMSEX=="M"],0.75, na.rm=TRUE) - quantile(AutoBi$LOSS[AutoBi$CLMSEX=="M"], 0.25, na.rm=TRUE)
quantile(AutoBi$LOSS[AutoBi$CLMSEX=="F"],0.75, na.rm=TRUE) - quantile(AutoBi$LOSS[AutoBi$CLMSEX=="F"], 0.25, na.rm=TRUE)
# Osserviamo i decili delle variabili LOSS e CLMAGE
#"LOSS"
quantile(AutoBi$LOSS, probs = seq(0,1,0.1), na.rm=T, digits=2)
#"CLMAGE"
quantile(AutoBi$CLMAGE, probs = seq(0,1,0.1), na.rm=T)
# Indice di Galton: G = (Q3+Q1−2*Q2)/(Q3−Q1)
Qloss<-fivenum(AutoBi$LOSS, na.rm=T)
g<-(Qloss[4]+Qloss[2]-2*Qloss[3])/(Qloss[4]-Qloss[2])
library(moments)
skewness(AutoBi$LOSS)
install.packages(moments)
fivenum(AutoBi$CLMAGE)
par(mfrow=c(2,1))
hist(AutoBi$CLMAGE)
boxplot(AutoBi$CLMAGE, horizontal=TRUE)
boxplot(AutoBi$LOSS, horizontal=TRUE)
boxplot(log(AutoBi$LOSS), horizontal=TRUE)
##A1. Carica il file hotdog.RData ----------------------------------------------
load(hotdog.RData)
setwd("~/Universita/Data_Analytics/script")
##A1. Carica il file hotdog.RData ----------------------------------------------
load(hotdog.RData)
##A1. Carica il file hotdog.RData ----------------------------------------------
load("hotdog.RData")
##A2. Descrivi in dettaglio l'oggetto hotdog.
## Che tipo di oggetto è? Quante unità contiene?
## Quante variabili? Che tipo di variabili? ------------------------------------
str(hotdog)
##A3. Calcola la distribuzione di frequenza assoluta,
## relativa e percentuale della variabile Tipo.
## Stampa i risultati in tre colonne. ------------------------------------------
summary(hotdog)
##A3. Calcola la distribuzione di frequenza assoluta,
## relativa e percentuale della variabile Tipo.
## Stampa i risultati in tre colonne. ------------------------------------------
table(hotdog$Type)
prop.table(table(hotdog$Type))
round(prop.table(table(hotdog$Type)), 2)
round(prop.table(table(hotdog$Type)), 3)*100
cbind(table(hotdog$Type)
round(prop.table(table(hotdog$Type)), 2)
cbind(table(hotdog$Type),
round(prop.table(table(hotdog$Type)), 2),
round(prop.table(table(hotdog$Type)), 3)*100)
a <- cbind(table(hotdog$Type),
round(prop.table(table(hotdog$Type)), 2),
round(prop.table(table(hotdog$Type)), 3)*100)
colnames(a) <- c("Assolute", "Relative", "Percentuali")
a
pie(table(hotdog$Type))
pie(table(hotdog$Type))
barplot(table(hotdog$Type))
#è quantitativa
hist(hotdog$Calorie)
#è quantitativa
hist(hotdog$Calorie)
barplot(table(hotdog$Type))
#è qualitativa
pie(table(hotdog$Type))
#è quantitativa
hist(hotdog$Calorie)
boxplot(table(hotdog$Calorie))
boxplot(hotdog$Calorie)
##A6. Calcola la distribuzione di frequenza per la variabile Calorie
## considerando le seguenti classi:  [80,120] (120,140] (140,160] (160,200] ----
hotdog$CalorieClass <- cut(hotdog$Calorie, breaks = c(80, 120, 140, 160, 200), include.lowest = T)
table(hotdog$CalorieClass)
##A7. Disegna un nuovo istogramma considerando le classi precedenti. -----------
hist(hotdog$CalorieClass)
##A7. Disegna un nuovo istogramma considerando le classi precedenti. -----------
hist(hotdog$CalorieClass)
##A7. Disegna un nuovo istogramma considerando le classi precedenti. -----------
hist(hotdog$CalorieClass, breaks = c(80, 120, 140, 160, 200))
##A7. Disegna un nuovo istogramma considerando le classi precedenti. -----------
hist(hotdog$Calorie, breaks = c(80, 120, 140, 160, 200))
##A8. Calcola le densità plottate nel punto precedente. ------------------------
wid <- diff((80, 120, 140, 160, 200))
##A8. Calcola le densità plottate nel punto precedente. ------------------------
wid <- diff(c(80, 120, 140, 160, 200))
prop.table(table(hotdog$CalorieClass))
prop.table(table(hotdog$CalorieClass))/wid
abline(h = prop.table(table(hotdog$CalorieClass))/wid)
par(mfrow = c(3, 1))
hist(hotdog$Calorie)
par(mfrow = c(3, 1))
hist(hotdog$Calorie[hotdog$Type == "Beef"])
hist(hotdog$Calorie[hotdog$Type == "Meet"])
par(mfrow = c(3, 1))
hist(hotdog$Calorie[hotdog$Type == "Beef"])
hist(hotdog$Calorie[hotdog$Type == "Meet"])
hist(hotdog$Calorie[hotdog$Type == "Poultry"])
par(mfrow = c(3, 1))
hist(hotdog$Calorie[hotdog$Type == "Beef"], name = "Beef")
hist(hotdog$Calorie[hotdog$Type == "Meet"], name = "Meat")
par(mfrow = c(3, 1))
hist(hotdog$Calorie[hotdog$Type == "Beef"], main = "Beef")
hist(hotdog$Calorie[hotdog$Type == "Meet"], main = "Meat")
hist(hotdog$Calorie[hotdog$Type == "Poultry"], main = "Poultry")
par(mfrow = c(3, 1))
hist(hotdog$Calorie[hotdog$Type == "Beef"], main = "Beef")
hist(hotdog$Calorie[hotdog$Type == "Meet"], main = "Meat")
par(mfrow = c(3, 1))
hist(hotdog$Calorie[hotdog$Type == "Beef"], main = "Beef")
hist(hotdog$Calorie[hotdog$Type == "Meet"], main = "Meat")
hist(hotdog$Calorie[hotdog$Type == "Poultry"], main = "Poultry")
hist(hotdog$Calorie[hotdog$Type == "Poultry"], main = "Poultry", xlim = c(80, 200))
par(mfrow = c(3, 1))
hist(hotdog$Calorie[hotdog$Type == "Beef"], main = "Beef", xlim = c(80, 200))
hist(hotdog$Calorie[hotdog$Type == "Meet"], main = "Meat", xlim = c(80, 200))
hist(hotdog$Calorie[hotdog$Type == "Poultry"], main = "Poultry", xlim = c(80, 200))
tapply(hotdog$Calorie, hotdog$Type, mean)
b <- tapply(hotdog$Calorie, hotdog$Type, mean)
b <- tapply(hotdog$Calorie, hotdog$Type, mean)
par(mfrow = c(3, 1))
hist(hotdog$Calorie[hotdog$Type == "Beef"], main = "Beef", xlim = c(80, 200))
abline(v = b)
library(MASS)
data("Cars93")
force(Cars93)
view(Cars93)
View(Cars93)
hist(Cars93$Length)
hist(Cars93$Length)
hist(Cars93$Length)
#in automatico fa tutti gli intervalli della stessa dimensione
#quindi sulla y basta che metta quelle assolute
hist(Cars93$Length, probability = T)
#confronto ora
par(mfrow=c(2, 2))
hist(Cars93$Length, main = "Istogramma con f. assolute")
hist(Cars93$Length, probability = T, main = "Istogramma con densità")
hist(Cars93$Length, probability = T, breaks = 12, main = "Istogramma con 12 intervalli")
hist(Cars93$Length, probability = T, breaks = c(140, 160, 170, 180, 190, 200, 220), main = "Istogramma con intervalli di diversa ampiezza")
mioisto <- hist(Cars93$Length, probability = T, breaks = c(140, 160, 170, 180, 190, 200, 220), main = "Istogramma con intervalli di diversa ampiezza")
str(mioisto)
sum(mioisto$density * mioisto$breaks)
mioisto$density
sum(c(0.0215*20, 0.01075*10, 0.03011*10, 0.02688*10, 0.016129*10, 0.0059*20))
sum(c(0.00215*20, 0.01075*10, 0.03011*10, 0.02688*10, 0.016129*10, 0.0059*20))
mio <- hist(Cars93$Length, probability = T, breaks = c(140, 160, 170, 180, 190, 200, 220), main = "Istogramma con intervalli di diversa ampiezza")
str(mio)
sum(c(0.00215*20, 0.01075*10, 0.03011*10, 0.02688*10, 0.016129*10, 0.0059*20))
sum(len*mio$density)
len <- c(20, 10, 10, 10, 10, 20)
sum(len*mio$density)
data("geyser")
force(geyser)
View(geyser)
str(geyser)
hist(geyser$waiting, prob = T)
hist(geyser$waiting, prob = F)
hist(geyser$waiting, prob = T)
