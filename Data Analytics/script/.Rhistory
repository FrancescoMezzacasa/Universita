country
str(country)
levels(countryf)
cbind(country, countryf)
as.factor(country)
str(country)
# scegliere la prima classe
?relevel
a <- relevel(countryf, "Italy")
a
relevel(countryf, "Italy")
countryf
#...o scegliere l'ordine delle classi
factor(country, levels = c("Italy", "Germany", "France"))
levels(countryf)
countryf2 <- countryf
levels(countryf)
levels(countryf2) <- c("Italy", "Germany", "France")
levels(countryf2)
cbind(countryf, countryf2)
#...o scegliere l'ordine delle classi
factor(country, levels = c("Italy", "Germany", "France"), labels = c("IT", "DE", "FR"))
#...o scegliere l'ordine delle classi
factor(country, levels = c("Italy", "Germany", "France"), labels = c("IT", "DE", "FR"))
# Factors ----
# vettori per variabili categoriali. Ogni gruppo corrisponde ad un livello
country <- c("Italy","Germany","France","Germany","Germany","Germany",
"France","Italy","Italy","France", "Italy")
countryf <- factor(country) # factor vs as.factor
levels(countryf)
a <- relevel(countryf, "Italy")
a
#...o scegliere l'ordine delle classi
factor(country, levels = c("Italy", "Germany", "France"), labels = c("IT", "DE", "FR"))
countryf2 <- countryf
levels(countryf)
levels(countryf2) <- c("Italy", "Germany", "France")
cbind(countryf, countryf2)
levels(countryf2)
cbind(countryf, countryf2)
table(countryf)
table(countryf2)
age <- c(47,44,44,40,38,36,42,34,34,44,42)
tapply(age, countryf, mean)
cbind(age, countryf)
tapply(age, countryf2, mean)
cbind(age, countryf)
cbind(age, countryf2)
labels(countryf2) <- c("IT", "DE", "FR")
factor(countryf2, levels = c("Italy", "Germany", "France"), labels = c("IT", "DE", "FR"))
cbind(countryf, countryf2)
table(countryf)
table(countryf2)
age <- c(47,44,44,40,38,36,42,34,34,44,42)
tapply(age, countryf2, mean)
cbind(age, countryf2)
countryf2
countryf2 <- factor(countryf2, levels = c("Italy", "Germany", "France"), labels = c("IT", "DE", "FR"))
countryf2
tapply(age, countryf2, mean)
cbind(age, countryf2)
gender <- c(1,1,2,1,1,2,1,2,2,2,1)
genderf <- factor(gender)
genderf
levels(genderf)
levels(genderf) <- c("F","M")
str(genderf)
countryf2 <- factor(country, levels = c("Italy", "Germany", "France"), labels = c("IT", "DE", "FR"))
countryf2
tapply(age, countryf2, mean)
cbind(age, countryf2)
x <- c(5, 12, 13, 12)
xf <- factor(x)
xf
y <- c("1", "1", "0", "1", "1", "0")
length(y)
yf <- factor(y)
length(yf)
yf
length(yf)
mode(yf)
levels(yf) <- c("m", "f")
levels(yf)
table(yf)
yf
countryf2 <- factor(country, levels = c("Italy", "Germany", "France"), labels = c("IT", "DE", "FR"))
countryf2
cbind(countryf, countryf2)
tapply(age, countryf2, mean)
cbind(age, countryf2)
countryf2
#4. Eseguire le seguenti righe
v1 <- factor(letters[1:5])
v1
levels(v1) <- rev(levels(v1))
levels(v1)
v2 <- factor(letters[1:5], levels = rev(letters[1:5]))
v2
cbind(v1, v2)
v2
v1
v2
rm(v1)
rm(v2)
#4. Eseguire le seguenti righe
v1 <- factor(letters[1:5])
v1
levels(v1) <- rev(levels(v1))
v1
v2 <- factor(letters[1:5], levels = rev(letters[1:5]))
v2
# Data frames ----
# è una lista ma può essere considerata come una matrice con
# colonne possibilmente di diverso tipo
# le componenti devono essere vettori (numerici, caratteri o logici),
# fattori, matrici numeriche, liste o altri dataframe
# vettori e matrici devono avere la stessa dimensione
# di solito memorizziamo le variabili nelle colonne e le unità nelle righe
under40 <- age < 40
under40
dat <- data.frame(Country=countryf, Age=age, Sex=genderf,
Under40=under40)
dat
str(dat)
is.data.frame(dat)
head(dat) #print the first 6 rows
dat[3,2]
dat[1:3, 2:4]
dat[3, ]
x <- dat[, 2]
str(x)
x
dat[ , c("Age", "Sex")]
dat[ , c(2,3)]
dat[ , 2:3]
str(dat[ , c("Age", "Sex")])
dat["Age"]
str(dat["Age"])
str(dat[,"Age"])
dat$Sex   #selezione di una sola colonna
#dat <- dat[, -2]
head(dat)
head(dat)
cbind.data.frame(dat, under40)
X <- cbind.data.frame(dat, under40)
dat$Under40 <-  NULL
#dat <- dat[, -2]
head(dat)
cbind.data.frame(dat, under40)
X <- cbind.data.frame(dat, under40)
cbind.data.frame(dat, Under40= under40*1)
#creare una nuova variabile logica uguale a TRUE se Country == Italy
dat$Italy <- dat$Country == "Italy"
dat$Italy
## convertire i character in factor automaticamente
df <- data.frame(x = 1:5,
y = c("A", "B", "C", "D", "E"))
df
df <- data.frame(x = 1:5,
y = c("A", "B", "C", "D", "E"),
stringsAsFactors = T)
df
str(df)
## convertire i character in factor automaticamente
df <- data.frame(x = 1:5,
y = c("A", "B", "C", "D", "E"))
str(df)
## convertire i character in factor automaticamente
df <- data.frame(x = 1:5,
y = c("A", "B", "C", "D", "E"))
str(df)
df <- data.frame(x = 1:5,
y = c("A", "B", "C", "D", "E"),
stringsAsFactors = T)
str(df)
Age #Le singole variabili non sono direttamente accessibili
attach(dat)
Age
dat$Age <- Age + 1
Age
#Age <- Age + 1 #not run
dat$Age
Age #il nuovo valore della variabile Age non è visibile finché il data frame non viene scollegato
detach(dat)
Age
dat$Age
######## Exercizi #########
#1. Esegui il codice seguente
x <- runif(8)
x
y <- letters[1:8]
y
z <- sample(c(rep(T,5),rep(F,3)))
cbind(z, y, x)
#Definisci un dataframe chiamato newdf con colonne z, y, x.
newdf <- data.frame(Z = z, Y = y, X = x)
newdf
nomi <- c("Gianni", "Pino", "Mario", "Franco", "Alberto")
eta <- c(55, 69, 99, 13, 35)
dataframe <- data.frame(Nomi = nomi, Età = eta)
dataframe
#3. Rinominare la seconda variabile del dataframe al punto precedente con il
# nome "Age"
dataframe[, 2] <- Age
#3. Rinominare la seconda variabile del dataframe al punto precedente con il
# nome "Age"
dataframe[, 2]
dataframe[, 2] <- "Age"
dataframe
dataframe <- data.frame(Nomi = nomi, Età = eta)
dataframe
colnames(dataframe, 2) <- "Age"
colnames(dataframe)[2] <- "Age"
dataframe
dim(dataframe)
pwd
gwd
getwd
wd
getwd()
load("data/feeling.Rdata")
setwd("C:/Users/frame/OneDrive/Desktop/Francesco scuola/Uni/Data Analytics/script")
load("data/feeling.Rdata")
cube<-function(x)
{
y<-x^3
return(y)
}
View(cube)
b <- cube(3)
# equivalentemente
cube<-function(x)
{
return(x^3)
}
cube(2)
# senza return la funzione restituisce in output l'ultima istruzione eseguita
power <- function(x, exp){
x^exp
}
power(2,2)
a <- power(2,2); a
power <- function(x, exp=1){ # valore di default
y<-x^exp
return(y)
}
a <- power(2,2); a
power <- function(x, exp = 1){
y<-x^exp
return(c(result = y, input = x, exp = exp))
}
power(2,2)
a <- power(2,2); a
# scriviamo una funzione per calcolare la media di un vettore
x <- 1:10
rm(a, b)
mymean <- function(a){
sum(x)/length(x)
}
mymean(x)
x <- 2
x <- c(2,3)
if (x<3) print("x is less than 3")
x <- 4
if (x<3) print("x is less than 3")
if (x>3) print("x is less than 3")
x <- 2
if (x<3) print("x is less than 3") else print("x is no less than 3")
x <- 4
if (x<3) print("x is less than 3") else print("x is no less than 3")
if(x<3){
print("ciao minore")
}else {
print("ciao maggiore")
}
x <- 4
a <- if (x<3) "x less than 3" else "x no less than 3"
a
b <- if (x<3) "x less than 3" #return NULL
b
x <- 2
c <- if (x<3){
print(x)
"x less than 3"
} else {
"x no less than 3"
}
c
# equivalentemente
if (x<3) a <- "x is less than 3" else a <- "x no less than 3"
a <- if(x<3) "x is less than 3" else "x no less than 3"
# equivalentemente
x <- 2
a <- if(x<3) "x is less than 3" else "x no less than 3"
b <- ifelse(x<3, "x is less than 3", "x no less than 3")
b
### if-else annidati -----
x <- 6
if (x<3) {
print("x is less than 3")
} else if (x==3) {
print("x is equal to 3")
} else {
print("x is greater than 3")
}
### if-else annidati -----
x <- 3
if (x<3) {
print("x is less than 3")
} else if (x==3) {
print("x is equal to 3")
} else {
print("x is greater than 3")
}
### if-else annidati -----
x <- 6
if (x<3) {
print("x is less than 3")
} else if (x==3) {
print("x is equal to 3")
} else {
print("x is greater than 3")
}
i=0
repeat {
i<- i+1
print(i)
if (i>5) break
}
for (i in 1:5) {
print(i)
}
xval <- c("a","b","c","d","e")
for (i in xval) print(i)
square <- function(x) x^2
cube <- function (x) x^3
doublesquare <- function(x) x^4
for (name in c("square","cube","doublesquare","mean")){
f <- get(name)
print(f(2))
}
xval <- c("a","b","c","d","e")
for (i in 1:5)
for (j in xval) print(paste(i,j))
## Modificatori: `break` e `next` -----
# Abbiamo già incontrato break con il comando repeat ma può essere utilizzato anche
# con while e for
i=0
while (TRUE) {
i<- i+1
print(i)
if (i>5) break
}
for (i in 1:10) {
print(i)
if (i>5) break
}
# lo stesso output può essere ottenuto con le tre istruzioni cicliche:
i=0
repeat {
i<- i+1
if (i==3) next
print(i)
if (i>5) break
}
for(i in 1:100){
if (i==3) next
print(i)
if (i>5) break
}
z <- matrix(1:50,nrow=10,ncol=5)
z
v1 <- apply(z,2,mean) ; v1
v1 <- apply(z,2,mean) ; v1
v1 <- apply(z,2,sd) ; v1
z[1,1] <- NA
v1 <- apply(z,2,mean) ; v1
v1 <- apply(z,2,mean, na.rm = T)
v2 <- c()
v2
v1
for (i in 1:ncol(z)) v2[i] <- mean(z[,i], na.rm =T)
v1
v2
system.time({
for (i in 1:ncol(z)) v2[i] <- mean(z[,i])
})
system.time({
v1 <- apply(z,2,mean)
})
# alcuni esempi
apply(z,1,sum, na.rm=T)
apply(z, 2, FUN = function(x) x^2)
apply(z, 2, FUN = function(x) x-min(x))
apply(z, 2, FUN = function(x) (x-mean(x))/sd(x))
apply(z, 2, scale)
x <- as.list(1:5)
v1 <- lapply(x, log)
v1
x
v2 <- list()
for (i in seq_along(x)) v2[[i]] <- log(x[[i]])
v1;v2
sapply(x, log);
sapply(3:9, seq)
#1. Scrivere una funzione che prenda in input un dataset e restituisca un data
# frame con colonne il minimo,  il massimo, la media e i tre quartili di ogni
# variabile numerica
#2. Verifica il funzionamento della funzione sul dataset Insurance disponibile
# nel pacchetto MASS
library(insuranceData)
data(Insurance)
#1. Scrivere una funzione che prenda in input un dataset e restituisca un data
# frame con colonne il minimo,  il massimo, la media e i tre quartili di ogni
# variabile numerica
#2. Verifica il funzionamento della funzione sul dataset Insurance disponibile
# nel pacchetto MASS
library(MASS)
data(Insurance)
data(Insurance)
force(Insurance)
dim(Insurance)
str(Insurance)
load("data/feeling.Rdata")
str(feeling)
cut(feeling$ft_immig_2016, breaks = 4, labels = c("strongly unfaborable", "unfavorable", "lightly favorable", "favorable"))
Feeling$ImmFactor <- cut(feeling$ft_immig_2016, breaks = 4, labels = c("strongly unfaborable", "unfavorable", "lightly favorable", "favorable"))
feeling$ImmFactor <- cut(feeling$ft_immig_2016, breaks = 4, labels = c("strongly unfaborable", "unfavorable", "lightly favorable", "favorable"))
na.omit(feeling$ImmFactor)
write.csv(x = feeling, file = "nuovoFeeling.Rdata", sep = ",")
write.csv(x = feeling, file = "nuovoFeeling.Rdata", sep = ',')
write.table(x = feeling, file = "nuovoFeeling.csv", sep = ',')
#1. Scrivere una funzione che prenda in input un dataset e restituisca un data
# frame con colonne il minimo,  il massimo, la media e i tre quartili di ogni
# variabile numerica, numero di NA e numero di valori unici
#provare ad usare apply (dopo serve cbind) invece di for
#2. Verifica il funzionamento della funzione sul dataset Insurance disponibile
# nel pacchetto MASS
library(MASS)
data(Insurance)
force(Insurance)
mapply(rep, 1:4,  4:1)
setToFrame <- function(ds){
minimo <- sapply(ds, min)
massimo <- sapply(ds, max)
media <- sapply(ds, mean)
numeroNA <- sapply(ds, contaNA)
unici <- sapply(ds, lenght(unique))
}
contaNA <- function(colonna){
return(sum(is.na(colonna)))
}
setToFrame(Insurance)
return(df)
massimo <- sapply(ds, max)
setToFrame <- function(ds){
minimo <- sapply(ds, min)
massimo <- sapply(ds, max)
media <- sapply(ds, mean)
numeroNA <- sapply(ds, contaNA)
unici <- sapply(ds, lenght(unique))
df <- cbind.data.frame(minimo, massimo, media, numeroNA, unici)
return(df)
}
setToFrame(Insurance)
View(Insurance)
setToFrame <- function(ds){
minimo <- sapply(ds, min)
massimo <- sapply(ds, max)
media <- sapply(ds, mean)
numeroNA <- sapply(ds, function(colonna) sum(is.na(colonna)))
unici <- sapply(ds, function(col) lenght(unique(col)))
df <- cbind.data.frame(minimo, massimo, media, numeroNA, unici)
return(df)
}
setToFrame(Insurance)
setToFrame <- function(ds){
numds <- Filter(is.numeric, ds)
minimo <- sapply(numds, min)
massimo <- sapply(numds, max)
media <- sapply(numds, mean)
numeroNA <- sapply(numds, function(colonna) sum(is.na(colonna)))
unici <- sapply(numds, function(col) lenght(unique(col)))
df <- cbind.data.frame(minimo, massimo, media, numeroNA, unici)
return(df)
}
setToFrame(Insurance)
setToFrame <- function(ds){
numds <- Filter(is.numeric, ds)
minimo <- sapply(numds, min)
massimo <- sapply(numds, max)
media <- sapply(numds, mean)
numeroNA <- sapply(numds, function(colonna) sum(is.na(colonna)))
unici <- sapply(numds, function(col) length(unique(col)))
df <- cbind.data.frame(minimo, massimo, media, numeroNA, unici)
return(df)
}
setToFrame(Insurance)
levels(Insurance$District)
f <- factor(c(1, 2, 3, 4, 1, 2, 3, 4))
levels(f) <- c("A", "A", "B", "B")
levels(f) <- (c("1", "1", "2", "3"))
levels(Insurance$District) <- (c("1", "1", "2", "3"))
levels(Insurance$District)
Insurance$Claims>10
Insurance$Claims[Insurance$Claims>10]
Insurance$BinaryClaims <- factor(Insurance$Claims>10)
Insurance$BinaryClaims
levels(Insurance$BinaryClaims) <- c("0", "1")
BinaryClaims
> Insurance$BinaryClaims
Insurance$BinaryClaims
